#!/usr/bin/env python
"""
An example code to demo the use of Keras' pad_sequences (keras.preprocessing.sequence.pad_sequences)

Keras API reference page: https://keras.io/preprocessing/sequence/

__author__ = "Hide Inada"
__copyright__ = "Copyright 2018, Hide Inada"
__license__ = "The MIT License"
__email__ = "hideyuki@gmail.com"
"""

import os
import logging

import numpy as np

import keras
from keras.models import Sequential
from keras.layers import Embedding
from keras.layers import GlobalAveragePooling1D

log = logging.getLogger(__name__)
logging.basicConfig(level=os.environ.get("LOGLEVEL", "INFO"))  # Change the 2nd arg to INFO to suppress debug logging


def example():
    """An example code.
    """

    # Pad the array for the second and the third element
    a = np.array([[1]])
    padded = keras.preprocessing.sequence.pad_sequences(a,
                                                        value=999,
                                                        padding='post',
                                                        maxlen=3)

    print("a: %s. Padded: %s" % (str(a), str(padded))) # a: [[1]]. Padded: [[  1 999 999]]

    # Don't do anything as the array already has 3 elements
    a = np.array([[1, 2, 3]])
    padded = keras.preprocessing.sequence.pad_sequences(a,
                                                        value=999,
                                                        padding='post',
                                                        maxlen=3)

    print("a: %s. Padded: %s" % (str(a), str(padded))) # a: [[1 2 3]]. Padded: [[1 2 3]]

    # Truncate the beginning part of an array as it has more than 3 elements
    a = np.array([[10, 20, 30, 40, 50]])
    padded = keras.preprocessing.sequence.pad_sequences(a,
                                                        value=999,
                                                        padding='post',
                                                        maxlen=3)

    print("a: %s. Padded: %s" % (str(a), str(padded))) # a: [[10 20 30 40 50]]. Padded: [[30 40 50]]

    # Truncate the beginning part of an array as it has more than 3 elements
    a = np.array([[10, 20, 30, 40, 50]])
    padded = keras.preprocessing.sequence.pad_sequences(a,
                                                        value=999,
                                                        padding='post',
                                                        truncating='pre',
                                                        maxlen=3)

    print("a: %s. Padded: %s" % (str(a), str(padded)))  # a: [[10 20 30 40 50]]. Padded: [[30 40 50]]

    # Truncate the end part of an array as it has more than 3 elements
    a = np.array([[10, 20, 30, 40, 50]])
    padded = keras.preprocessing.sequence.pad_sequences(a,
                                                        value=999,
                                                        padding='post',
                                                        truncating='post',
                                                        maxlen=3)
    print("a: %s. Padded: %s" % (str(a), str(padded))) # a: [[10 20 30 40 50]]. Padded: [[10 20 30]]

def main():
    """Defines an application's main functionality"""
    example()


if __name__ == "__main__":
    main()

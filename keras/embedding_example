#!/usr/bin/env python
"""
An example code to demo the use of Keras' Embedding layer.

__author__ = "Hide Inada"
__copyright__ = "Copyright 2018, Hide Inada"
__license__ = "The MIT License"
__email__ = "hideyuki@gmail.com"
"""

import os
import logging

import numpy as np

import keras
from keras.models import Sequential
from keras.layers import Embedding
from keras.layers import GlobalAveragePooling1D

log = logging.getLogger(__name__)
logging.basicConfig(level=os.environ.get("LOGLEVEL", "INFO"))  # Change the 2nd arg to INFO to suppress debug logging


def example():
    """An example code.
    """

    input_data = np.array([
        [1, 2, 0, 4, 1],  # sample #1
        [3, 1, 4, 0, 4]  # sample #2
    ])

    model = Sequential()
    model.add(Embedding(5,  # vocabulary size.  Maximum value of integer elements + 1.
                        3,  # number of vector dimension to output for each element
                        input_length=5  # Number of elements in a single sample
                        )
              )

    model.compile(keras.optimizers.Adam(), loss=keras.losses.binary_crossentropy,
                  metrics=['accuracy'])
    y_hat = model.predict(x=input_data)

    print(y_hat)
    """
    The above print function outputs the following:
    
[[[-0.04236919  0.0045603  -0.03078989]
  [ 0.04116304 -0.01320444  0.00881679]
  [ 0.03448316  0.02717209  0.02566716]
  [ 0.04358021  0.03094218 -0.0267297 ]
  [-0.04236919  0.0045603  -0.03078989]]

 [[-0.00171513 -0.0219035   0.02995816]
  [-0.04236919  0.0045603  -0.03078989]
  [ 0.04358021  0.03094218 -0.0267297 ]
  [ 0.03448316  0.02717209  0.02566716]
  [ 0.04358021  0.03094218 -0.0267297 ]]]
    
    Note that this has 10 lines of output.
    Each line is a 3-D vector that corresponds to a single integer element in input.
    """


def main():
    """Defines an application's main functionality"""
    example()


if __name__ == "__main__":
    main()

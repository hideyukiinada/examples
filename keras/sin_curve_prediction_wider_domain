#!/usr/bin/env python
"""
An example code to see how ML performs for a sine curve prediction.

__author__ = "Hide Inada"
__copyright__ = "Copyright 2018, Hide Inada"
__license__ = "The MIT License"
__email__ = "hideyuki@gmail.com"
"""

import os
import logging
from pathlib import Path

import datetime
import numpy as np
import sys

import keras
from keras.models import Model
from keras.layers import Input
from keras.layers import Dense
from keras.optimizers import Adam

from matplotlib import pyplot as plt

log = logging.getLogger(__name__)
logging.basicConfig(level=os.environ.get("LOGLEVEL", "INFO"))


def example():
    """An example code.
    """

    x = (np.random.random(1024) * 2.0 - 1.0)  # Continuous uniform distribution [-1, 1)
    x *= 3 * np.pi  # [-3pi, 3pi) # three cycles

    y = np.sin(x) + np.random.random() * 0.3

    x_test = (np.random.random(256) * 2.0 - 1.0)
    x_test *= 6 * np.pi

    y_test = np.sin(x_test)

    input_layer = Input(shape=(1,))
    layer = Dense(2048, activation='relu')(input_layer)
    layer = Dense(128, activation='relu')(layer)
    last_layer = Dense(1, activation='linear')(layer)

    model = Model(input_layer, last_layer)
    adam = Adam(lr=0.001, beta_1=0.9, beta_2=0.999)
    model.compile(adam, loss=keras.losses.mean_squared_error)
    model.fit(x=x, y=y, epochs=100, validation_data=(x_test, y_test))

    plt.plot(x, y, 'bo')

    y_test = model.predict(x_test)
    plt.plot(x_test, y_test, 'rx')

    plt.show()


def main():
    """Defines an application's main functionality"""
    example()


if __name__ == "__main__":
    main()

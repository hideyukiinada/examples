#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Extract pairs of sentences from tatoeba.org's sentence files.

Usage
-----
1. Change the OUTPUT_FILE parameter to specify the file to store the output.

2. Type: ISO 639-3 3-letter-language code for source and target languages:
   tatoeba_sentence_pair_generator --data_dir <directory where sentences.csv is stored> --src eng --target fra

__author__ = "Hide Inada"
__copyright__ = "Copyright 2018, Hide Inada"
__license__ = "The MIT License"
__email__ = "hideyuki@gmail.com"
"""
import os
import sys
import logging
import argparse

from pathlib import Path

OUTPUT_FILE = "/tmp/ml_examples/sentence_pairs.txt"

log = logging.getLogger(__name__)
logging.basicConfig(level=os.environ.get("LOGLEVEL", "INFO"))  # Change the 2nd arg to INFO to suppress debug logging


def extract(data_dir=None, src_lang=None, target_lang=None):
    """
    Extract source language and target language pair from sentences file.

    Parameters
    ----------
    data_dir: str
        Directory where Tatoeba's files are located.
    src_lang: str
        Three-letter ISO-639-3 code for the source language
    target_lang: str
        Three-letter ISO-639-3 code for the target language
    """
    if data_dir is None:
        log.fatal(
            "Please make sure that you specify the directory where Tatoeba's files are located with --data_dir option.")
        sys.exit(1)

    if src_lang is None or target_lang is None:
        log.fatal(
            "Please make sure you specify the source language code and target language code with --src and --target options")
        sys.exit(1)

    # Check if data_dir exist
    data_dir_path = Path(data_dir)
    if data_dir_path.exists() is False:
        raise ValueError("%s does not exist." % (data_dir_path))

    sentence_path = data_dir_path / Path("sentences.csv")
    if sentence_path.exists() is False:
        raise ValueError("%s does not exist." % (sentence_path))

    links_path = data_dir_path / Path("links.csv")
    if links_path.exists() is False:
        raise ValueError("%s does not exist." % (links_path))

    # Build id to content mappnig for src and target languages
    id_to_sentence_src = dict()
    id_to_sentence_target = dict()

    num_src_sentence = 0
    num_target_sentence = 0
    with open(sentence_path, "r") as f:
        for line in f:
            fields = line.split('\t')
            sentence_id = fields[0]
            lang_id = fields[1]
            text = fields[2]

            if lang_id == src_lang:
                id_to_sentence_src[sentence_id] = text.rstrip()
                num_src_sentence += 1
            elif lang_id == target_lang:
                id_to_sentence_target[sentence_id] = text.rstrip()
                num_target_sentence += 1

    log.info("Number of source sentences found: %d." % (num_src_sentence))
    log.info("Number of target sentences found: %d." % (num_target_sentence))

    sentence_pairs = list()
    with open(links_path, "r") as f:
        for line in f:
            fields = line.split('\t')
            sentence_id = fields[0]
            translation_id = fields[1].rstrip()

            if sentence_id in id_to_sentence_src and translation_id in id_to_sentence_target:
                sentence_pairs.append((id_to_sentence_src[sentence_id], id_to_sentence_target[translation_id]))

    num_pairs = len(sentence_pairs)
    log.info("%d pairs found" % (num_pairs))

    output_file_path = Path(OUTPUT_FILE)
    with open(output_file_path, "w") as f_out:
        for pair in sentence_pairs:
            f_out.write(pair[0] + "\t" + pair[1] + "\n")


def main():
    parser = argparse.ArgumentParser(description='Tatoeba sentence pair generator')
    parser.add_argument('--src',
                        type=str,
                        default="eng",
                        help="Directory where Tatoeba's sentences and links files are located")
    parser.add_argument('--target',
                        type=str,
                        default="fra",
                        help="Source language code")
    parser.add_argument('--data_dir',
                        type=str,
                        default="../../../../../ai/dataset/tatoeba/",
                        help="Target language code")

    args = parser.parse_args()
    data_dir = args.data_dir
    src_lang = args.src
    target_lang = args.target

    extract(data_dir=data_dir, src_lang=src_lang, target_lang=target_lang)


if __name__ == "__main__":
    main()

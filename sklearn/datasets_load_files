#!/usr/bin/env python
"""

References
----------
https://scikit-learn.org/stable/modules/generated/sklearn.datasets.load_files.html
https://www.opencodez.com/python/text-classification-using-keras.htm

__author__ = "Hide Inada"
__copyright__ = "Copyright 2018, Hide Inada"
__license__ = "The MIT License"
__email__ = "hideyuki@gmail.com"
"""

import os
import logging

from pathlib import Path

import numpy as np
import sklearn.datasets

SAMPLE_DIR = Path("/tmp/ml_examples/sk")

log = logging.getLogger(__name__)
logging.basicConfig(level=os.environ.get("LOGLEVEL", "INFO"))  # Change the 2nd arg to INFO to suppress debug logging


def create_test_files():
    """
    Create test files under the sample directory.
    """

    test_sample_dir = SAMPLE_DIR  # Directory where the checkpoints will be saved

    if test_sample_dir.exists() is False:
        test_sample_dir.mkdir(parents=True, exist_ok=True)

    # Create directories
    dirs = ["apple", "banana", "coconut"]
    for dir in dirs:
        dir = test_sample_dir / Path(dir)
        if dir.exists() is False:
            dir.mkdir(parents=True, exist_ok=True)
            log.info("%s created" % (dir))
        else:
            log.info("%s found. Skip creation" % (dir))

    # Create files
    files = ["apple/apple.txt", "banana/banana.txt", "coconut/coconut.txt"]
    text_body = ["Apples are delicious.", "Bananas are good for breakfast.", "You can make juice out of coconuts."]
    for i, f in enumerate(files):
        text_path = test_sample_dir / Path(f)
        if text_path.exists() is False:
            with open(text_path, "w") as fh:
                fh.write(text_body[i])
            log.info("%s written" % (text_path))


def example():
    """An example.
    """
    create_test_files()

    bunch = sklearn.datasets.load_files(SAMPLE_DIR, load_content=True)
    for file_index, file in enumerate(bunch.filenames):
        log.info("-----")
        log.info("File path: %s" % (file))
        label_id = bunch.target[file_index]
        log.info("Label ID: %d" % (label_id))
        label = bunch.target_names[label_id]
        log.info("Labels: %s" % (label))
        log.info("File contents: %s" % bunch.data[file_index])


def main():
    """Defines an application's main functionality"""
    example()


if __name__ == "__main__":
    main()

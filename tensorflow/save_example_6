#!/usr/bin/env python
"""
An example code to demo the saving a model.

__author__ = "Hide Inada"
__copyright__ = "Copyright 2018, Hide Inada"
__license__ = "The MIT License"
__email__ = "hideyuki@gmail.com"
"""

import os
import logging
from pathlib import Path

import tensorflow as tf

MODEL_BASE_DIR = "/tmp/ml_examples/tf/save_model"
# Note that this directory should not exist before running this script.
# If exists, builder.SavedModelBuilder throws AssertionError as of TensorFlow 1.12
MODEL_DIR = "/tmp/ml_examples/tf/save_model/model"

log = logging.getLogger(__name__)
logging.basicConfig(level=os.environ.get("LOGLEVEL", "INFO"))  # Change the 2nd arg to INFO to suppress debug logging


def example():
    """An example code.
    """

    # Create model directory if it doesn't exist
    model_base_dir = Path(MODEL_BASE_DIR)
    if model_base_dir.exists() is False:
        model_base_dir.mkdir(parents=True, exist_ok=True)

    # Create model directory if it doesn't exist
    model_dir = Path(MODEL_DIR)
    if model_dir.exists() is False:
        model_dir.mkdir(parents=True, exist_ok=True)

    tf.reset_default_graph()

    with tf.variable_scope("fruit") as scope:
        a = tf.placeholder(dtype=tf.int32, name="apple")
        b = tf.placeholder(dtype=tf.int32, name="banana")
        cumulative_result = tf.get_variable("cr", shape=[], dtype=tf.int32, initializer=tf.zeros_initializer)

        c = tf.add(a, b)
        current_cr = tf.assign(cumulative_result, c + cumulative_result, name="update_cr")

        w = tf.get_variable("w", shape=[], dtype=tf.int32, initializer=tf.zeros_initializer)
        w_assign = tf.assign(w, 123)  # We will check this value after loading.

        w_const = tf.constant(456, name="w_const")

    init_op = tf.global_variables_initializer()  # Set up operator to assign all init values to variables

    with tf.Session() as s:

        s.run(init_op)  # Actually assign initial value to variables

        current_cr_val = s.run(current_cr, {a: 10, b: 20})
        print("current_cr: %d" % (current_cr_val))

        s.run(w_assign)  # w = 123
        w_val = s.run(w)
        print("w: %d" % (w_val))

        gr = tf.get_default_graph()
        gd = gr.as_graph_def()
        data = gd.SerializeToString()

        with open(model_dir / Path("my_model.pb"), "wb") as f:
            f.write(data)

    tf.reset_default_graph()

    with tf.Session() as new_sess:
        log.info("New session created for loading the saved model.")

        with open(model_dir / Path("my_model.pb"), "rb") as f:
            buf = f.read()

        gd.ParseFromString(buf)

        tf.import_graph_def(gd)

        gr2 = tf.get_default_graph()

        for o in gr2.get_operations():
            print(str(o.name))

        tens = gr2.get_tensor_by_name("import/fruit/w_const:0")  # Note "import" namespace
        w_val = new_sess.run(tens) # This works as constant is stored in the graph

        print("Read from the loaded model: w_const: %d" % (w_val))

        tens = gr2.get_tensor_by_name("import/fruit/w:0")  # Note "import" namespace

        w_val = new_sess.run(tens)  # This line throws an error "Attempting to use uninitialized value import/fruit/w"

        print("w: %d" % (w_val))


def main():
    """Defines an application's main functionality"""
    example()


if __name__ == "__main__":
    main()

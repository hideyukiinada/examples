#!/usr/bin/env python
"""
An example code to demo the saving a model.

__author__ = "Hide Inada"
__copyright__ = "Copyright 2018, Hide Inada"
__license__ = "The MIT License"
__email__ = "hideyuki@gmail.com"
"""

import os
import logging
from pathlib import Path

import tensorflow as tf

MODEL_DIR = "/tmp/ml_examples/tf/save_model/model/"
CHECKPOINT_DIR = "/tmp/ml_examples/tf/save_model/cp/"
CHECKPOINT_PATH = CHECKPOINT_DIR + "foo"  # Directory will be chkbar .  Most files will be prefixed with "foo"

log = logging.getLogger(__name__)
logging.basicConfig(level=os.environ.get("LOGLEVEL", "INFO"))  # Change the 2nd arg to INFO to suppress debug logging


def example():
    """An example code.
    """

    # Create model directory if it doesn't exist
    model_dir = Path(MODEL_DIR)
    if model_dir.exists() is False:
        model_dir.mkdir(parents=True, exist_ok=True)

    # Create checkpoint directory if it doesn't exist
    checkpoint_dir = Path(CHECKPOINT_DIR)
    if checkpoint_dir.exists() is False:
        checkpoint_dir.mkdir(parents=True, exist_ok=True)

    tf.reset_default_graph()

    with tf.variable_scope("vs1") as scope:
        a = tf.get_variable("a", [], dtype=tf.float32, initializer=tf.constant_initializer(0))
        b = tf.get_variable("b", [], dtype=tf.float32, initializer=tf.zeros_initializer())
        b = tf.assign(b, a)
        a_inc = tf.assign(a, a + 10)

    init_op = tf.global_variables_initializer()  # Set up operator to assign all init values to variables

    saver = tf.train.Saver({"vs1/a":a})
    with tf.Session() as s:
        s.run(init_op)  # Actually assign initial value to variables

        file_name = tf.train.latest_checkpoint(CHECKPOINT_DIR)
        if file_name is not None:
            saver.restore(s, file_name)
            log.info("Checkpoint file %s found. Restoring." % (file_name))
        else:
            log.info("Checkpoint file was not found.")
            s.run(init_op)  # Actually assign initial value to variables

        a_val, b_val = s.run([a_inc, b])
        print("a: %f, b:%f" % (a_val, b_val))

        saver.save(s, CHECKPOINT_PATH)  # Note using the prefix here.


def main():
    """Defines an application's main functionality"""
    example()


if __name__ == "__main__":
    main()
